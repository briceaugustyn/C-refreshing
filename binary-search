/*Binary Search
Difficulty Level : Easy
Last Updated : 22 Nov, 2021
Given a sorted array arr[] of n elements, write a function to search a given element x in arr[].
A simple approach is to do a linear search. The time complexity of the above algorithm is O(n). Another approach to perform the same task is using Binary Search. 
Binary Search: Search a sorted array by repeatedly dividing the search interval in half. Begin with an interval covering the whole array. If the value of the search key is less than the item in the middle of the interval, narrow the interval to the lower half. Otherwise, narrow it to the upper half. Repeatedly check until the value is found or the interval is empty.
 
*/



#include <stdio.h>
#include <stdbool.h>
int main()
{
int arr[]={2,5,8,12,16,23,38,56,72,91};
    int n;
    //1 find the middle element
    n = sizeof(arr) / sizeof(arr[0]);
    n=n/2;  
    //2 Compare x with the middle element.
     if (arr[n]==23 ){
            printf("Element 23is presnt at index %i",i);
            //flag for element presence
            present=true;
            } 
    
    //If x matches with the middle element, we return the mid index.
    //Else If x is greater than the mid element, then x can only lie in the right half subarray after the mid element. So we recur for the right half.
    //Else (x is smaller) recur for the left half.
    
    

    bool present=false;
    //2 loop n times
    for (int i=0;i<n;i++){
          //3 if arr[n]= 110 print Element 110 is present at index n
       
    }
     //if non flag print the element was not present in the array
     if (!present)    printf("Element 110 is not present in array");
            
    return 0;
}
